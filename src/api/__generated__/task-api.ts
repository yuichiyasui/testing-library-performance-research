/**
 * Generated by orval v6.22.1 🍺
 * Do not edit manually.
 * Task API
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  DeleteTaskMutationPathParameters,
  GetTaskQueryPathParameters,
  Task,
  TaskRequest,
  UpdateTaskMutationPathParameters,
} from "./schemas";
import { customInstance } from "../mutator/custom-instance";
import type { ErrorType } from "../mutator/custom-instance";

/**
 * @summary Get all tasks
 */
export const getTasksQuery = (signal?: AbortSignal) => {
  return customInstance<Task[]>({ url: `/tasks`, method: "GET", signal });
};

export const getGetTasksQueryQueryKey = () => {
  return [`/tasks`] as const;
};

export const getGetTasksQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof getTasksQuery>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasksQuery>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTasksQueryQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTasksQuery>>> = ({
    signal,
  }) => getTasksQuery(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTasksQuery>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTasksQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTasksQuery>>
>;
export type GetTasksQueryQueryError = ErrorType<unknown>;

/**
 * @summary Get all tasks
 */
export const useGetTasksQuery = <
  TData = Awaited<ReturnType<typeof getTasksQuery>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getTasksQuery>>, TError, TData>
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTasksQueryQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create a task
 */
export const createTaskMutation = (taskRequest: TaskRequest) => {
  return customInstance<Task>({
    url: `/tasks`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: taskRequest,
  });
};

export const getCreateTaskMutationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTaskMutation>>,
    TError,
    { data: TaskRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTaskMutation>>,
  TError,
  { data: TaskRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTaskMutation>>,
    { data: TaskRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createTaskMutation(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTaskMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTaskMutation>>
>;
export type CreateTaskMutationMutationBody = TaskRequest;
export type CreateTaskMutationMutationError = ErrorType<unknown>;

/**
 * @summary Create a task
 */
export const useCreateTaskMutation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTaskMutation>>,
    TError,
    { data: TaskRequest },
    TContext
  >;
}) => {
  const mutationOptions = getCreateTaskMutationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get a task
 */
export const getTaskQuery = (
  { taskId }: GetTaskQueryPathParameters,
  signal?: AbortSignal,
) => {
  return customInstance<Task>({
    url: `/tasks/${taskId}`,
    method: "GET",
    signal,
  });
};

export const getGetTaskQueryQueryKey = ({
  taskId,
}: GetTaskQueryPathParameters) => {
  return [`/tasks/${taskId}`] as const;
};

export const getGetTaskQueryQueryOptions = <
  TData = Awaited<ReturnType<typeof getTaskQuery>>,
  TError = ErrorType<void>,
>(
  { taskId }: GetTaskQueryPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTaskQuery>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetTaskQueryQueryKey({ taskId });

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTaskQuery>>> = ({
    signal,
  }) => getTaskQuery({ taskId }, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!taskId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getTaskQuery>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTaskQueryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTaskQuery>>
>;
export type GetTaskQueryQueryError = ErrorType<void>;

/**
 * @summary Get a task
 */
export const useGetTaskQuery = <
  TData = Awaited<ReturnType<typeof getTaskQuery>>,
  TError = ErrorType<void>,
>(
  { taskId }: GetTaskQueryPathParameters,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getTaskQuery>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTaskQueryQueryOptions({ taskId }, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Update a task
 */
export const updateTaskMutation = (
  { taskId }: UpdateTaskMutationPathParameters,
  taskRequest: TaskRequest,
) => {
  return customInstance<Task>({
    url: `/tasks/${taskId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: taskRequest,
  });
};

export const getUpdateTaskMutationMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTaskMutation>>,
    TError,
    { pathParams: UpdateTaskMutationPathParameters; data: TaskRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTaskMutation>>,
  TError,
  { pathParams: UpdateTaskMutationPathParameters; data: TaskRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTaskMutation>>,
    { pathParams: UpdateTaskMutationPathParameters; data: TaskRequest }
  > = (props) => {
    const { pathParams, data } = props ?? {};

    return updateTaskMutation(pathParams, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTaskMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTaskMutation>>
>;
export type UpdateTaskMutationMutationBody = TaskRequest;
export type UpdateTaskMutationMutationError = ErrorType<void>;

/**
 * @summary Update a task
 */
export const useUpdateTaskMutation = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTaskMutation>>,
    TError,
    { pathParams: UpdateTaskMutationPathParameters; data: TaskRequest },
    TContext
  >;
}) => {
  const mutationOptions = getUpdateTaskMutationMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Delete a task
 */
export const deleteTaskMutation = ({
  taskId,
}: DeleteTaskMutationPathParameters) => {
  return customInstance<void>({ url: `/tasks/${taskId}`, method: "DELETE" });
};

export const getDeleteTaskMutationMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTaskMutation>>,
    TError,
    { pathParams: DeleteTaskMutationPathParameters },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTaskMutation>>,
  TError,
  { pathParams: DeleteTaskMutationPathParameters },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTaskMutation>>,
    { pathParams: DeleteTaskMutationPathParameters }
  > = (props) => {
    const { pathParams } = props ?? {};

    return deleteTaskMutation(pathParams);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTaskMutationMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTaskMutation>>
>;

export type DeleteTaskMutationMutationError = ErrorType<unknown>;

/**
 * @summary Delete a task
 */
export const useDeleteTaskMutation = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTaskMutation>>,
    TError,
    { pathParams: DeleteTaskMutationPathParameters },
    TContext
  >;
}) => {
  const mutationOptions = getDeleteTaskMutationMutationOptions(options);

  return useMutation(mutationOptions);
};
